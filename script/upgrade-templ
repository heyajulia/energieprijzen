#!/usr/bin/env bash

set -uo pipefail

LATEST_COMMIT_TITLE=$(git log --author="dependabot" --pretty=format:"%B" -1 | head -n 1)
VERSIONS=$(echo "$LATEST_COMMIT_TITLE" | grep -Po "\d+\.\d+\.\d+" | head -n 2)
OLD_VERSION=$(echo "$VERSIONS" | head -n 1)
NEW_VERSION=$(echo "$VERSIONS" | tail -n 1)

echo "Commit title: $LATEST_COMMIT_TITLE"
echo "We'll be upgrading from $OLD_VERSION to $NEW_VERSION."

CONFIRM_DEFAULT=no

# If the commit title contains "templ", then we'll assume it's correct but ask the user to confirm.
if [[ "$LATEST_COMMIT_TITLE" == *"templ"* ]]; then
    CONFIRM_DEFAULT=yes
fi

if gum confirm --default=$CONFIRM_DEFAULT --affirmative="Yep! ðŸ¤©" --negative="Nope. ðŸ˜¬" "Is this right? Shall we upgrade?"; then
    # We didn't use "set -e" because "gum confirm" exits with a non-zero exit code if the user says no. "set -x" is noisy but useful for debugging.
    set -ex
    sed -i "s/$OLD_VERSION/$NEW_VERSION/g" .devcontainer/Dockerfile
    gum spin --show-output --spinner="line" --title="Downloading a temporary copy of Templ v$NEW_VERSION..." -- wget -q -O templ.tar.gz "https://github.com/a-h/templ/releases/download/v$NEW_VERSION/templ_Linux_x86_64.tar.gz"
    tar xf templ.tar.gz templ
    ./templ generate
    rm templ.tar.gz templ
    echo "Done! ðŸŽ‰ Make sure to review the changes and commit them."
else
    echo "No worries. See ya! ðŸ‘‹"
    exit 0
fi

# TODO: Handle the case where the user has already upgraded the dependency, we can't find the commit, or we can't determine the versions, etc.